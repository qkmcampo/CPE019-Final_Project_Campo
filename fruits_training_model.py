# -*- coding: utf-8 -*-
"""Fruits_Training_Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bVHiRsbPe8OwUTje6lc4nsyBcZ4LaH51
"""

# --- Imports ---
import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

# --- Change this to your dataset folder path ---
# Example: "datasets/Fruits" or "C:/Users/YourName/Documents/Fruits"
base_dir = "/content/drive/MyDrive/Emtech2/Fruits"

# --- Safety Check ---
if not os.path.exists(base_dir):
    raise FileNotFoundError(f"‚ùå Dataset folder not found at: {base_dir}")

pip install matplotlib

if not os.path.exists(base_dir):
    print("‚ùå Dataset folder not found!")
    print("‚û° Please make sure this path exists in your Google Drive:")
    print(base_dir)
    print("\nüìÇ The folder structure should look like this:")
    print("Fruits/")
    print("‚îú‚îÄ‚îÄ Apple/")
    print("‚îú‚îÄ‚îÄ Banana/")
    print("‚îú‚îÄ‚îÄ Mango/")
    print("‚îî‚îÄ‚îÄ ...")
    raise SystemExit("‚ö†Ô∏è Stopping: Dataset path not found.")

img_height, img_width = 150, 150
batch_size = 32
epochs = 20

datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=25,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.15,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

train_generator = datagen.flow_from_directory(
    os.path.join(base_dir, '/content/drive/MyDrive/Emtech2/Fruits'),
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

val_generator = datagen.flow_from_directory(
    os.path.join(base_dir, '/content/drive/MyDrive/Emtech2/Fruits'),
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

def create_fruit_model(num_classes):
    base_model = MobileNetV2(input_shape=(img_height, img_width, 3),
                              include_top=False,
                              weights='imagenet')
    base_model.trainable = False

    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(128, activation='relu')(x)
    x = Dropout(0.4)(x)
    outputs = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=base_model.input, outputs=outputs)
    model.compile(optimizer=Adam(learning_rate=0.0001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model

model = create_fruit_model(num_classes=train_generator.num_classes)

early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=epochs,
    callbacks=[early_stop]
)

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title("Training vs Validation Accuracy")
plt.show()

model.save('fruit_model.h5', save_format='h5')
print(" Model saved as fruit_model.h5")